""
"" This vimrc defines utility functions to be used from within yim.
""


let g:up_arrow_key_nmap_doc='  [nmap] <up>    : cursor up'
let g:down_arrow_key_nmap_doc='  [nmap] <down>  : cursor down'
let g:right_arrow_key_nmap_doc='  [nmap] <right> : cursor right'
let g:left_arrow_key_nmap_doc='  [nmap] <left>  : cursor left'
let g:page_scroll_key_mapping_state=1
let g:tab_switch_key_mapping_state=1


function YimUI_ShowKeyMapping(...)
  let input_flag=get(a:, 1, '')

  let flags = [input_flag]
  if input_flag == ''
    let flags=['leader', 'file', 'tab', 'fold']
  endif

  if len(flags) > 1
    echo ' '
    echo 'General key mapping:'
    echo '  [imap] <j> + <j> : mapping to <esc> key'
    echo '  [nmap] <k> + <k> : show key mapping of each category and helper shortcuts'
    echo '  [nmap] <s> + <d> : show working session directory path'
    echo '  --'
    echo g:up_arrow_key_nmap_doc
    echo g:down_arrow_key_nmap_doc
    echo g:right_arrow_key_nmap_doc
    echo g:left_arrow_key_nmap_doc
  endif

  for flag in flags
    if flag == 'leader'
      echo ' '
      echo 'Leader key mapping:'
      echo '  Leader key is <space>'
      echo '  [nmap] <leader> + a : set page scroll key mapping'
      echo '  [nmap] <leader> + s : set tab switch key mapping'
    elseif flag == 'file'
      echo ' '
      echo 'File releated key mapping:'
      echo '  [nmap] <w> : write text to current file or to specified file path'
    elseif flag == 'tab'
      echo ' '
      echo 'Tab related key mapping:'
      echo '  [nmap] <t>                     : create new tab'
      echo '  [nmap] <t> + <t>               : close current tab'
      echo '  [nmap] <shift> + <right arrow> : move to next tab'
      echo '  [nmap] <shift> + <left arrow>  : move to previous tab'
    elseif flag == 'fold'
      echo ' '
      echo 'Fold related key mapping:'
      echo '  [nmap] <f>       : open single fold'
      echo '  [nmap] <f> + <f> : close single fold'
      echo '  [nmap] <F>       : open all folds'
      echo '  [nmap] <F> + <F> : close all folds'
    endif
  endfor

  execute 'echo ""'
endfunctio


function YimText_RemoveTrailSpaces()
  let cur_pos=getpos('.')
  execute '%s/\s\+$//e'
  call cursor(cur_pos[1], cur_pos[2])
endfunction


function YimBuffer_SetStatusLine()
  let comps={
  \  'file': '%f\ %r%m',
  \  'cursor': 'line\ %l,\ column\ %c,\ %p%%\ of\ the\ text'
  \}
  let settings=comps['file'] . '%=' . comps['cursor']
  execute 'set statusline=' . settings
endfunction


function YimBuffer_SetPageScrollKeyMapping()
  if g:page_scroll_key_mapping_state == 1
    nmap <up> <c-b>
    nmap <down> <c-f>
    echo 'Up/Down arrow keys are now in page up/down mode.'
    let g:up_arrow_key_nmap_doc='  [nmap] <up>   : page up'
    let g:down_arrow_key_nmap_doc='  [nmap] <down> : page down'
  else
    unmap <up>
    unmap <down>
    echo 'Up/Down arrow keys are now in cursor up/down mode.'
    let g:up_arrow_key_nmap_doc='  [nmap] <up>   : cursor up'
    let g:down_arrow_key_nmap_doc='  [nmap] <down> : cursor down'
  endif

  let g:page_scroll_key_mapping_state=g:page_scroll_key_mapping_state * -1
endfunction


function YimBuffer_SetTabSwitchKeyMapping()
  if g:tab_switch_key_mapping_state == 1
    nmap <right> :tabnext<cr>
    nmap <left> :tabprevious<cr>
    echo 'Right/Left arrow keys are now in next/previous tab mode.'
    let g:right_arrow_key_nmap_doc='  [nmap] <right> : next tab'
    let g:left_arrow_key_nmap_doc='  [nmap] <left>  : previous tab'
  else
    unmap <right>
    unmap <left>
    echo 'Right/Left arrow keys are now in cursor right/left mode.'
    let g:right_arrow_key_nmap_doc='  [nmap] <right> : cursor right'
    let g:left_arrow_key_nmap_doc='  [nmap] <left>  : cursor left'
  endif

  let g:tab_switch_key_mapping_state=g:tab_switch_key_mapping_state * -1
endfunction


function YimGit_ShowInfo()
  let commands=[
  \  'clear',
  \  'echo [Origin Url]',
  \  'git config --get remote.origin.url',
  \  'echo',
  \  'echo [Git Status]',
  \  'git status'
  \]
  execute '!' . join(commands, ';')
endfunction


function YimBuffer_SetColorColumns(...)
  let columns=[]

  for idx in range(a:0)
    let val=get(a:, idx+1, 0)
    call add(columns, val)
  endfor

  execute 'set colorcolumn=' . join(columns, ',')
endfunction


function YimBuffer_SetWorkingSessionDirectory()
  let work_sess_dir=expand('$YIM_TEMP_DIRPATH/yim_sessions')
  if finddir(work_sess_dir) == ''
    call mkdir(work_sess_dir)
  endif

  let work_sess_dir=expand(work_sess_dir . '/' . strftime('%Y%m%d-%H%M%S'))
  call mkdir(work_sess_dir)
  execute 'set directory=' . work_sess_dir
endfunction

